{"version":3,"file":"yidash.umd.js","sources":["../lib/math.js","../lib/number.js","../lib/regexp.js","../lib/tree.js"],"sourcesContent":["/**\r\n *\r\n * @module 数学\r\n */\r\n\r\n/**\r\n * 两数相减\r\n * @param {Number} x 数字 x\r\n * @param {Number} y 数字 y\r\n * @returns {Number} 返回一个数字\r\n * @author chensuiyi <chensuiyi.com>\r\n */\r\nexport function math_Minus(x, y) {\r\n    return x - y;\r\n}\r\n\r\n/**\r\n * 两数相加\r\n * @param {Number} x 数字 x\r\n * @param {Number} y 数字 y\r\n * @returns {Number} 返回一个数字\r\n * @author chensuiyi <chensuiyi.com>\r\n */\r\nexport function math_Plus(x, y) {\r\n    return x + y;\r\n}\r\n","/**\r\n * @module 数字\r\n */\r\n\r\n/**\r\n * 返回有效数字\r\n * @param {Number} number 数字传参\r\n * @param {String} symbol 符号（默认：-0+，表示允许负数，0和正数）\r\n * @param {Number} decimalPlaces - 小数位数\r\n * @returns {Number} 如果数字有效，则返回当前值，否则返回上一个有效值\r\n * @summary 应用场景：强制输入框必须输入有效值，如果值无效，则显示上一步的值\r\n * @example\r\n * import { number_ValidNumber } from 'yidash';\r\n * let validNumber = number_ValidNumber();\r\n * validNumber(1.111); // 1.11\r\n * validNumber(1.571333); // 1.57\r\n * validNumber(\"1..221333\"); // 1.57\r\n * validNumber(\"1.2213.33\"); // 1.57\r\n * validNumber(\"1.\"); // 1.\r\n * validNumber(\"1.2\"); // 1.20\r\n * validNumber(\"1.7.\"); // 1.20\r\n */\r\nexport function number_ValidNumber(number, symbol = \"-0+\", decimalPlaces = 2) {\r\n    // 最后一个数字\r\n    let lastNumber = \"\";\r\n    return function (number) {\r\n        // 双层转换，保证得到一个字符串数字转换后的数字 (真实数字)\r\n        let stringNumber = String(number);\r\n        let realNumber = Number(stringNumber);\r\n\r\n        // 如果确实是一个数字\r\n        if (Number.isNaN(realNumber) === false) {\r\n            if (stringNumber.endsWith(\".\")) {\r\n                return number;\r\n            }\r\n            // 将当前值缓存\r\n            let finallyNumber = realNumber.toFixed(decimalPlaces);\r\n            lastNumber = finallyNumber;\r\n            return finallyNumber;\r\n        } else {\r\n            return lastNumber;\r\n        }\r\n    };\r\n}\r\n","/**\r\n * @file 跟正则相关的东西在这里\r\n * @module 正则\r\n */\r\n\r\n/**\r\n * @name 火车车次\r\n * @author 陈随易 <https://chensuiyi.com>\r\n * @returns {RegExp}\r\n * @summary /^[GCDZTSPKXLY1-9]\\d{1,4}$/\r\n * @example\r\n * import { regexp_TrainNumber } from 'yidash';\r\n * // regexp_TrainNumber 对应的值如下，请根据情况，选择对应的正则表达式\r\n * regexp_TrainNumber = {\r\n *      default:/^[GCDZTSPKXLY1-9]\\d{1,4}$/,\r\n *      type2:/ddddd/\r\n * }\r\n */\r\nexport const regexp_TrainNumber = {\r\n    /**\r\n     * @default 默认正则\r\n     */\r\n    default: /^[GCDZTSPKXLY1-9]\\d{1,4}$/,\r\n};\r\n","/**\r\n * @module 树结构\r\n */\r\n\r\nimport { keyBy } from \"lodash-es\";\r\n/**\r\n * @param {Array} arrs - 传入的一维数组\r\n * @param {String} id - 唯一标识字段\r\n * @param {String} pid - 父级标识字段\r\n * @param {String} children - 子级标识字段\r\n * @author 陈随易 <https://chensuiyi.com>\r\n * @example\r\n * tree_Array2Tree([\r\n *      {id:1,pid:0},\r\n *      {id:2,pid:1},\r\n *      {id:3,pid:2}\r\n * ])\r\n * return [{\r\n *      id:1,\r\n *      pid:0,\r\n *      children:[{\r\n *          id:2,\r\n *          pid:1,\r\n *          children:[{\r\n *              id:3,\r\n *              pid:2,\r\n *              children:[]\r\n *          }]\r\n *      }]\r\n * }]\r\n * @returns {Array} 返回一个无限级数组结构\r\n */\r\nexport function tree_Array2Tree(arrs, id = \"id\", pid = \"pid\", children = \"children\") {\r\n    // id对象，用于通过映射ID取得对应的对象数据\r\n    let idObject = keyBy(arrs, id);\r\n\r\n    // 无限级树结构\r\n    let treeData = [];\r\n\r\n    arrs.forEach((item) => {\r\n        // 父级对象数据\r\n        let pData = idObject[item[pid]];\r\n        if (pData) {\r\n            if (!pData[children]) {\r\n                pData[children] = [];\r\n            }\r\n            pData[children].push(item);\r\n        } else {\r\n            treeData.push(item);\r\n        }\r\n    });\r\n    return treeData;\r\n}\r\n"],"names":["x","y","number","symbol","decimalPlaces","lastNumber","stringNumber","String","realNumber","Number","isNaN","endsWith","finallyNumber","toFixed","default","arrs","id","pid","children","idObject","keyBy","treeData","forEach","item","pData","push"],"mappings":"oSAY2BA,EAAGC,GAC1B,OAAOD,EAAIC,wBAUWD,EAAGC,GACzB,OAAOD,EAAIC,iCCFoBC,EAAQC,EAAgBC,YAAAA,IAAAA,EAAgB,GAEvE,IAAIC,EAAa,GACjB,gBAAiBH,GAEb,IAAII,EAAeC,OAAOL,GACtBM,EAAaC,OAAOH,GAGxB,IAAiC,IAA7BG,OAAOC,MAAMF,GAAuB,CACpC,GAAIF,EAAaK,SAAS,KACtB,OAAOT,EAGX,IAAIU,EAAgBJ,EAAWK,QAAQT,GAEvC,OADAC,EAAaO,EACNA,EAEP,OAAOP,yBCtBe,CAI9BS,QAAS,wDCUmBC,EAAMC,EAAWC,EAAaC,YAAxBF,IAAAA,EAAK,eAAMC,IAAAA,EAAM,gBAAOC,IAAAA,EAAW,YAErE,IAAIC,EAAWC,QAAML,EAAMC,GAGvBK,EAAW,GAcf,OAZAN,EAAKO,QAAQ,SAACC,GAEV,IAAIC,EAAQL,EAASI,EAAKN,IACtBO,GACKA,EAAMN,KACPM,EAAMN,GAAY,IAEtBM,EAAMN,GAAUO,KAAKF,IAErBF,EAASI,KAAKF,KAGfF"}