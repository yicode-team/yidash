{"version":3,"file":"number\\validNumber.es.js","mappings":"AACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,KCuB3EI,eAAeC,EAAYC,EAAQC,EAAS,MAAOC,EAAgB,GAEtE,IAAIC,EAAa,GACjB,OAAO,SAAUH,GAEb,IAAII,EAAeC,OAAOL,GACtBM,EAAaC,OAAOH,GAGxB,IAAiC,IAA7BG,OAAOC,MAAMF,GAAuB,CACpC,GAAIF,EAAaK,SAAS,KACtB,OAAOT,EAGX,IAAIU,EAAgBJ,EAAWK,QAAQT,GAEvC,OADAC,EAAaO,EACNA,EAEP,OAAOP,G","sources":["webpack://yidash/webpack/bootstrap","webpack://yidash/webpack/runtime/define property getters","webpack://yidash/webpack/runtime/hasOwnProperty shorthand","webpack://yidash/./lib/number/validNumber.mjs"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * @category 数字\n * @module 返回有效数字\n */\n\n/**\n * 返回有效数字\n * @param {Number} number 数字传参\n * @param {String} symbol 符号（默认：-0+，表示允许负数，0和正数）\n * @param {Number} decimalPlaces - 小数位数\n * @returns {Number} 如果数字有效，则返回当前值，否则返回上一个有效值\n * @summary 应用场景：强制输入框必须输入有效值，如果值无效，则显示上一步的值\n * @example\n * import { validNumber } from 'yidash';\n * let validNumber = validNumber();\n * validNumber(1.111); // 1.11\n * validNumber(1.571333); // 1.57\n * validNumber(\"1..221333\"); // 1.57\n * validNumber(\"1.2213.33\"); // 1.57\n * validNumber(\"1.\"); // 1.\n * validNumber(\"1.2\"); // 1.20\n * validNumber(\"1.7.\"); // 1.20\n */\nexport async function validNumber(number, symbol = \"-0+\", decimalPlaces = 2) {\n    // 最后一个数字\n    let lastNumber = \"\";\n    return function (number) {\n        // 双层转换，保证得到一个字符串数字转换后的数字 (真实数字)\n        let stringNumber = String(number);\n        let realNumber = Number(stringNumber);\n\n        // 如果确实是一个数字\n        if (Number.isNaN(realNumber) === false) {\n            if (stringNumber.endsWith(\".\")) {\n                return number;\n            }\n            // 将当前值缓存\n            let finallyNumber = realNumber.toFixed(decimalPlaces);\n            lastNumber = finallyNumber;\n            return finallyNumber;\n        } else {\n            return lastNumber;\n        }\n    };\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","async","validNumber","number","symbol","decimalPlaces","lastNumber","stringNumber","String","realNumber","Number","isNaN","endsWith","finallyNumber","toFixed"],"sourceRoot":""}